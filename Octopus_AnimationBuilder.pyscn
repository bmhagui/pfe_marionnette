# -*- coding: utf-8 -*-

import Sofa

import os
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/Jonathan/'

# Scene en millimètre avec un objet de 30cm sur 60cm
# Volume 1311640 mm3
# Young modulus 100 N/mm2 -> 100 000 000Pa
# Densité 0.8 g/cm3 -> 8e-7 kg/mm3
# Poids -> 1.05 kg

def rotate(v,q):

    c0 = ((1.0 - 2.0 * (q[1] * q[1] + q[2] * q[2]))*v[0] + (2.0 * (q[0] * q[1] - q[2] * q[3])) * v[1] + (2.0 * (q[2] * q[0] + q[1] * q[3])) * v[2])
    c1 = ((2.0 * (q[0] * q[1] + q[2] * q[3]))*v[0] + (1.0 - 2.0 * (q[2] * q[2] + q[0] * q[0]))*v[1] + (2.0 * (q[1] * q[2] - q[0] * q[3]))*v[2])
    c2 = ((2.0 * (q[2] * q[0] - q[1] * q[3]))*v[0] + (2.0 * (q[1] * q[2] + q[0] * q[3]))*v[1] + (1.0 - 2.0 * (q[1] * q[1] + q[0] * q[0]))*v[2])

    v[0] = c0
    v[1] = c1
    v[2] = c2

    return v

def createScene(rootNode):

                rootNode.createObject('RequiredPlugin', pluginName='SoftRobots')
                rootNode.createObject('VisualStyle', displayFlags="showVisualModels showBehaviorModels showCollisionModels \
                                        hideBoundingCollisionModels showForceFields showInteractionForceFields hideWireframe")

                rootNode.createObject('FreeMotionAnimationLoop')

                rootNode.createObject('QPInverseProblemSolver', printLog='0', epsilon="1e0", displayTime="1",
                maxIterations="250", tolerance="1e-13")
                # rootNode.createObject('GenericConstraintSolver')

                rootNode.createObject('CollisionPipeline', verbose="0")
                rootNode.createObject('BruteForceDetection', name="N2")
                rootNode.createObject('CollisionResponse', response="FrictionContact", responseParams="mu=0")
                rootNode.createObject('LocalMinDistance', name="Proximity", alarmDistance="10", contactDistance="5")

                rootNode.createObject('BackgroundSetting', color='0 0.168627 0.211765')
                rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight")
                # rootNode.createObject('OglGrid', nbSubdiv="30", size="300")
                rootNode.findData('gravity').value="0 0 -9810"
                rootNode.createObject('SerialPortBridgeGeneric', name="serial", port="/dev/ttyACM0", baudRate="115200", size="13", listening="true")


                ##########################################
                # Effector goal for interactive control  #
                ##########################################
                rootNode.createObject('PythonScriptController', classname="controller", filename=path+"../../controller/OctopusAnimationBuilderController.py")
                goal = rootNode.createChild('goal')
                goal.createObject('EulerImplicit', firstOrder="1")
                goal.createObject('CGLinearSolver')
                goal.createObject('MechanicalObject', name='goalMO', showObject="1", showObjectScale="5", drawMode="1",
                        position = (
                                 " 92.8465 -0.713462 -6.7375    122.868 -1.11357 -39.8893 "+       #####4 5
                                 " 140.789 -0.476541 -79.4164    "+                                #####6
                                 # " 39.1825 -27.3801  97.5917  "+                                   #####10
                                 " -3.12159 2.03639 86.5269   "+                                   #####12
                                 # " 35.1195 35.4151 96.9422 "+                                      #####13
                                 " 20.3424 74.1655     9.859 "+                                    #####17
                                 " 28.6248 108.646  -15.6909    37.5762 131.515     -60.0334"+     #####18 19
                                 " 16.9392 -74.4207      10.7643"+                                 #####23
                                 " 29.3189 -111.009  -24.7433    38.3856 -133.359    -59.8732"+    #####24 25
                                 " -49.2609 -32.5451  19.6       -88.8932 -60.1046    -6.6625"+    #####28 29
                                 " -46.6606 29.3311    21.549"+                                    #####33
                                 " -87.9037 58.2242 -5.2457"+                                      #####34
                                   " ")
                        )
                goal.createObject('AnimationEditor', listening="true", printLog="1")
                goal.createObject('UncoupledConstraintCorrection')


                ##########################################
                # FEM Model                              #
                ##########################################
                octopus = rootNode.createChild('octopus')
                # octopus.createObject('VisualStyle', displayFlags="hideForceFields")
                octopus.createObject('EulerImplicit', name='odesolver', rayleighMass="0.1", rayleighStiffness="0.1")
                octopus.createObject('SparseLDLSolver')

                octopus.createObject('MeshVTKLoader', name='loader', filename=path+'octopus_tetra.vtu')
                octopus.createObject('TetrahedronSetTopologyContainer', src='@loader')
                octopus.createObject('TetrahedronSetTopologyModifier')
                octopus.createObject('TetrahedronSetTopologyAlgorithms', template='Vec3d')
                octopus.createObject('TetrahedronSetGeometryAlgorithms', template='Vec3d')

                octopus.createObject('MechanicalObject', name='tetras', template='Vec3d')
                octopus.createObject('DiagonalMass', name="DiagMass", massDensity="8e-7")
                ### Do not remove: used to distribute mass
                octopus.createObject('SphereROI', name="ROI", centers="0 0 90", radii="80")
                octopus.createObject('BoxROI', name="BoxROI", box="20 -50 80 70 50 120", drawBoxes="0")
                octopus.createObject('TetrahedronFEMForceField', template='Vec3d', name='FEM', method='large', poissonRatio='0.3',  youngModulus='50')

                octopus.createObject('LinearSolverConstraintCorrection')


                ##########################################
                # Effector                               #
                ##########################################

                effector = octopus.createChild('effector')
                effector.createObject('MechanicalObject', name="effectorPoint",
                        position = (
                                 " 92.8465 -0.713462 -6.7375    122.868 -1.11357 -39.8893 "+       #####4 5
                                 " 140.789 -0.476541 -79.4164    "+                                #####6
                                 # " 39.1825 -27.3801  97.5917  "+                                   #####10
                                 " -3.12159 2.03639 86.5269   "+                                   #####12
                                 # " 35.1195 35.4151 96.9422 "+                                      #####13
                                 " 20.3424 74.1655     9.859 "+                                    #####17
                                 " 28.6248 108.646  -15.6909    37.5762 131.515     -60.0334"+     #####18 19
                                 " 16.9392 -74.4207      10.7643"+                                 #####23
                                 " 29.3189 -111.009  -24.7433    38.3856 -133.359    -59.8732"+    #####24 25
                                 " -49.2609 -32.5451  19.6       -88.8932 -60.1046    -6.6625"+    #####28 29
                                 " -46.6606 29.3311    21.549"+                                    #####33
                                 " -87.9037 58.2242 -5.2457"+                                      #####34
                                   " "))
                effector.createObject('PositionEffector', template='Vec3d', name="effector",
                        indices=range(0,14),
                        effectorGoal="@../../goal/goalMO.position")
                effector.createObject('BarycentricMapping', mapForces="false", mapMasses="false")

                ##########################################
                # Actuator                               #
                ##########################################

                actuator = octopus.createChild('actuator')
                actuator.createObject('MechanicalObject', name="actuatorPoints",
                    position=("0 0 90 "+
                    "  125 0 -25   -10 -40 230 "     + #Thumb
                    "  40 -120 -25    -60 4 230   "  + #Index
                    "  -100 -70 -25    -20 60 230  " + #Middle
                    "  -100 70 -25      50 40 230  " + #Ring
                    "  40 120 -25     40 -35 230 "   + #Pinky
                    "  40 30 115       40 -30 115"   +  #Eyes
                    " 0 0 60  0 0 30  0 0 15 "
                    ))

                actuator.createObject('CableActuator', name='cable1',   indices='0 13 14 15',  pullPoint="0 0 500",       minForce='0')  #CableHead
                actuator.createObject('CableActuator', name='cable2',   indices='1',  pullPoint="125 0 500.0",   minForce='0')  #CableTentacleOut1
                actuator.createObject('CableActuator', name='cable3',   indices='3',  pullPoint="40 -120 500",   minForce='0')  #CableTentacleOut2
                actuator.createObject('CableActuator', name='cable4',   indices='5',  pullPoint="-100 -70 500",  minForce='0')  #CableTentacleOut3
                actuator.createObject('CableActuator', name='cable5',   indices='7',  pullPoint="-100 70 500",   minForce='0')  #CableTentacleOut4
                actuator.createObject('CableActuator', name='cable6',   indices='9',  pullPoint="40 120 500",    minForce='0')  #CableTentacleOut5
                actuator.createObject('CableActuator', name='cable7',   indices='11', pullPoint="40 30 500",     minForce='0')  #CableEyeR
                actuator.createObject('CableActuator', name='cable8',   indices='12', pullPoint="40 -30 500",    minForce='0')  #CableEyeL

                actuator.createObject('BarycentricMapping', mapForces="false", mapMasses="false")

                for i in range(0,5): #CableTentacleIn
                        rz = 72*i
                        v = [10, 0, 500]
                        teta = 1.25664*i
                        q = [0., .0, numpy.sin(teta/2.), numpy.cos(teta/2.)]
                        rotate(v,q)

                        actuatorTentacle = octopus.createChild('actuatorTentacle'+str(i))
                        actuatorTentacle.createObject('MechanicalObject', name="actuatorPoint",
                                position=(
                                        "10 0 70 "+
                                        "10 0 60 "+
                                        "10 0 40 "+
                                        "48.2737 0  24.5372 "+
                                        "65.9662 0  14.5481 "+
                                        "70.5244 0  11.8775 "+
                                        "82.0908 0  6.00442 "+
                                        "84.7668 0  4.42029 "+
                                        "96.343  0 -4.22773 "+
                                        "101.041 0 -7.67323 "+
                                        "111.516 0 -20.6461 "+
                                        "114.192 0 -23.2302 "+
                                        "124.024 0 -36.2552 "+
                                        "125.817 0 -39.7529 "+
                                        "133.884 0 -54.605  "+
                                        "135.678 0 -58.1027 "+
                                        "142.853 0 -72.0935 "+
                                        "143.755 0 -74.7298 "+
                                        "158.056 0 -93.8366 "+
                                        "158.056 0 -95"),
                                rotation = "0 0 "+str(rz))
                        actuatorTentacle.createObject('CableActuator', template='Vec3d',
                                name="cable1"+str(i),
                                indices=range(0,20),
                                pullPoint=str(v[0])+" "+str(v[1])+" "+str(v[2]),
                                minForce="0"
                                )
                        actuatorTentacle.createObject('BarycentricMapping', mapForces="false", mapMasses="false")



                ##########################################
                # Visualization                          #
                ##########################################
                octopusVisu = octopus.createChild('visu')
                octopusVisu.createObject('OglModel', filename=path+"octopus.stl", template='ExtVec3f', color="0.0 0.7 0.7")
                octopusVisu.createObject('BarycentricMapping')


                ##########################################
                # Contact                                #
                ##########################################
                # for i in range(1,6):
                #         tentacleContact = octopus.createChild('TentacleCollisionModel'+str(i))
                #         tentacleContact.createObject('VisualStyle', displayFlags="hideCollisionModels")
                #         tentacleContact.createObject('MeshSTLLoader', name='loader', filename=path+'Tentacle'+str(i)+'_CollisionModel.stl')
                #         tentacleContact.createObject('Mesh', src='@loader')
                #         tentacleContact.createObject('MechanicalObject')
                #         tentacleContact.createObject('TTriangleModel')
                #         tentacleContact.createObject('TLineModel')
                #         tentacleContact.createObject('TPointModel')
                #         tentacleContact.createObject('BarycentricMapping')

                # for i in range(1,6):
                #     rz = 72*i
                #     tentacleContact = octopus.createChild('TentacleContact'+str(i))
                #     tentacleContact.createObject('MechanicalObject',
                #             position="64 0 11   69 7 8     69 -7 8     71 0 17 "+
                #                      "107 0 -23   111 7 -27     111 -7 -27    117 0 -17 "+
                #                      "93 0 -7.5   97 7 -11     97 -7 -11    102 0 -0.5 "+
                #                      "138 0 -73   141 7 -77     141 -7 -77     146 0 -72 "+
                #                      "78 0 3     83 7 0    83 -7 0    86 0 9   "+
                #                      "118 0 -38   122 6.7 -42     122 -7 -42   129 -0.2 -35  "+
                #                      "129.5 0 -55.5    132 7 -60    132.5 -7 -59.6   138 0 -53.5"
                #                      ,rotation = "0 0 "+str(rz)
                #                      )
                #     tentacleContact.createObject('UnilateralPlaneConstraint', indices="0 1 2 3")
                #     tentacleContact.createObject('UnilateralPlaneConstraint', indices="4 5 6 7")
                #     tentacleContact.createObject('UnilateralPlaneConstraint', indices="8 9 10 11")
                #     tentacleContact.createObject('UnilateralPlaneConstraint', indices="12 13 14 15")
                #     tentacleContact.createObject('UnilateralPlaneConstraint', indices="16 17 18 19")
                #     tentacleContact.createObject('UnilateralPlaneConstraint', indices="20 21 22 23")
                #     tentacleContact.createObject('UnilateralPlaneConstraint', indices="24 25 26 27")
                #     tentacleContact.createObject('BarycentricMapping')


                #########################################
                # Ground                                #
                #########################################
                # ground = rootNode.createChild('ground')
                # ground.createObject('VisualStyle', displayFlags="hideCollisionModels hideBehaviorModels")
                # ground.createObject('EulerImplicit', firstOrder='1')
                # ground.createObject('CGLinearSolver', iterations='100')
                # ground.createObject('MeshSTLLoader', name="mesh", filename=path+'ground.stl', scale="400", translation="700 0 -100", rotation="90 0 0")
                # ground.createObject('Mesh', src="@mesh")
                # ground.createObject('OglModel', src="@mesh", color="0.8 0.7 0.54")
                # ground.createObject('MechanicalObject')
                # ground.createObject('FixedConstraint', fixAll="1")
                # ground.createObject('PointModel', group="1")
                # ground.createObject('LineModel', group="1")
                # ground.createObject('TriangleModel', group="1")
                # ground.createObject('UncoupledConstraintCorrection')


                return rootNode
